1. class Candidate

Класс, являющийся представлением кандидата - того же избирателя (class Voter, см. его описание ниже),
только содержащего еще одну характеристику - количество набранных на выборах голосов.

Приватные поля:
1) Voter* _voter - указатель на класс Voter (кандидат является избирателем);
2) int _votes - количество голосов, которые набрал кандидат на выборах. 

Публичные методы:
1) Candidate(Voter* voter) - конструктор класса; кандидат сначала гарантированно содержит 0 голосов
2) Voter* getVoter() const - получение приватного поля _voter
3) int getVotes() const - получение приватного поля _votes
4) void increaseVotes() - инкрементирование количества голосов

2. class Voter

Класс, характеризующий избирателя.

Приватные поля:
1) string _id - уникальный идентификатор избирателя;
2) string _name - имя избирателя;
3) Poll* _poll - указатель на избирательный участок, к которому привязан избиратель;
4) Candidate* _candidate - указатель на кандидата, за которого проголосовал избиратель.

Публичные методы:
1) Voter(string id, string name, Poll* poll) - конструктор класса; приватное поле кандидат
изначально устанавливается нулевым;
2) string getID() const - получение приватного поля _id;
3) string getName() const - получение приватного поля _name;
4) Poll* getPoll() const - получение приватного поля _poll;
5) Candidate* getCandidate() const - получение приватного поля _candidate;
6) void changePoll(Poll* poll) - изменение избирательного участка (при слиянии участков или 
их расформировании);
7) void vote(Candidate* candidate) - голосование избирателя за кандидата (инициализация приватного
поля _candidate в случае, если избиратель еще не отдал голос);
8) void showStatistics() const - отображение статистики избирателя в виде 
<id_voter> <name_voter> chose <id_candidate> (если избиратель никого не выбрал, то будет отображено 
соответствующее сообщение);
9) void print() const - вывод на экран ID и имени избирателя в виде <id> <name>;
10) void removeCandidate() - обнуление приватного поля _candidate (по завершении выборов).

3. class Poll

Класс, характеризующий избирательный участок.

Приватные поля:
1) string _name - название избирательного участка;
2) map<string, Voter*> _voters - словарь избирателей, относящихся к данному избирательному участку
(ключом словаря является уникальный идентификатор избирателя).

Публичные методы:
1) Poll(string name) - конструктор класса; инициализация приватного поля _name; 
2) void addVoter(Voter* voter) - добавление нового избирателя к избирательному участку;
3) void addVoters(map<string, Voter*> voters) - добавление нескольких избирателей к избирательному 
участку;
4) void removeVoter(string id) - удаление избирателя из избирательного участка;
5) string getName() const - получение приватного поля _name;
6) map<string, Voter*> getVoters() const - получение приватного поля _voters;
7) void showStatistics() const - отображение статистики избирательного участка (отображение статистики
каждого избирателя из этого участка - см. 8-й публичный метод класса Voter);
8) void printVoters() - вывод на экран информации по каждому избирателю из участка (см. 9-й публичный 
метод класса Voter);
9) ~Poll() - деструктор класса (очистка словаря избирателей).

4. class ElectSystem

Класс, характеризующий избирательную систему - связующее звено между избирателями, кандидатами и 
избирательными участками.

Приватные поля:
1) enum State { usual, prepared, elections } - перечисление, отвечающее за состояние избирательной
системы: usual - обычное состояние, когда можно добавлять и удалять избирателей, создавать и 
объединять избирательные участки; prepared - т.н. предвыборное состояние, во время котрого можно также
регистрировать и отзывать кандидатов; elections - состояние выборов, во время которого можно только 
голосовать за кандидатов;
2) State _state - текущее состояние выборов;
3) map<string, Poll*> _polls - словарь всех избирательных участков (ключом словаря является имя
участка);
4) map<string, Candidate*> _candidates - словарь всех кандидатов (ключом словаря является ID
кандидата);
5) map<string, Voter*> _voters - словарь всех избирателей (ключом словаря является ID избирателя).

Публичные методы:
1) ElectSystem() - конструктор класса по умолчанию; приватное поле _state устанавливается как обычное
состояние;
2) void createElections() - создание выборов: установка предвыборного состояния prepared;
3) void startElections() - начало выборов: установка состояния выборов elections;
4) Poll* findPoll(string name) const - нахождение избирательного участка по имени;
5) Voter* findVoter(string id) const - нахождение избирателя по ID;
6) Candidate* findCandidate(string id) const - нахождение кандидата по ID;
7) void addVoter(string id, string name, string pollName) - добавление избирателя в указанный участок;
8) void addPoll(string name) - добавление избирательного участка;
9) void addCandidate(string id) - добавление кандидата;
10) void removeVoter(string id) - удаление избирателя по ID;
11) void merge(string source, string destination) - слияние участков (source будет перемещен в 
destination, после чего перестанет существовать);
12) void removeCandidate(string id) - удаление кандидата по ID;
13) void vote(string idVoter, string idCandidate) - голосование избирателя за кандидата;
14) void printCandidates() const - вывод списка кандидатов (их ID и имен);
15) void printPolls() const - вывод списка избирательных участков (их имен);
16) void printVotersFromPoll(string pollName) const - вывод ID и имен избирателей конкретного 
избирательного участка;
17) void printVoters() const - вывод ID и имен всех избирателей (проход по всем избирательным
участкам);
18) void showStatistics() const - отображение общей статистики по выборам (вызов 7-го метода класса 
Poll для каждого избирательного участка);
19) void showPollStatistics(string pollName) const - отображение статистики конкретного избирательного
участка;
20) void finishElections() - завершение выборов: установка _state в prepared;
21) void stopElections() - остановка состояния выборов: установка _state в usual;
22) void printFile(string fileName) const - запись информации об участках и избирателях в файл;
23) void clear() - очистка выборов: обнуление списка кандидатов, избирательных участков и избирателей;
24) ~ElectSystem() - деструктор класса.
